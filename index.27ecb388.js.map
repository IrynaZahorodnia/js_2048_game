{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","src/utils/utils.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $789e422544353ab8$export$f862736cd8997e00 = ()=>{\n    return Math.random() > 0.9 ? 4 : 2;\n};\nconst $789e422544353ab8$export$a5f994103229acba = (state)=>{\n    const emptyCells = [];\n    for(let x = 0; x < 4; x++){\n        for(let y = 0; y < 4; y++)if (state[x][y] === 0) emptyCells.push([\n            x,\n            y\n        ]);\n    }\n    return emptyCells;\n};\n\n\nvar $a5fd07fa01589658$require$getEmptyCells = $789e422544353ab8$export$a5f994103229acba;\nvar $a5fd07fa01589658$require$getRandomTwoOrFour = $789e422544353ab8$export$f862736cd8997e00;\nconst $a5fd07fa01589658$var$SIZE = 4;\nclass $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n    }\n    slideLeft(filledCells) {\n        filledCells.forEach((row)=>{\n            for(let i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n                row[i] *= 2;\n                this.score += row[i];\n                row.splice(i + 1, 1);\n            }\n            while(row.length < $a5fd07fa01589658$var$SIZE)row.push(0);\n        });\n    }\n    filledFilter(row) {\n        return row.filter((cell)=>cell !== 0);\n    }\n    checkAbleToMove(cells) {\n        const newCells = cells.flat();\n        const oldCells = this.state.flat();\n        for(let i = 0; i < newCells.length; i++){\n            if (newCells[i] !== oldCells[i]) return true;\n        }\n        return false;\n    }\n    moveLeft() {\n        const filledCells = this.state.map((row)=>this.filledFilter(row));\n        this.slideLeft(filledCells);\n        const changed = this.checkAbleToMove(filledCells);\n        this.state = filledCells;\n        return changed;\n    }\n    moveRight() {\n        const filledCells = this.state.map((row)=>{\n            return this.filledFilter(row.reverse());\n        });\n        this.slideLeft(filledCells);\n        const changed = this.checkAbleToMove(filledCells);\n        const newCells = filledCells.map((row)=>row.reverse());\n        this.state = newCells;\n        return changed;\n    }\n    swap(x, y) {\n        const tempCell = this.state[x][y];\n        this.state[x][y] = this.state[y][x];\n        this.state[y][x] = tempCell;\n    }\n    transpose() {\n        for(let x = 0; x < $a5fd07fa01589658$var$SIZE; x++)for(let y = 0; y < x; y++)this.swap(x, y);\n    }\n    moveUp() {\n        this.transpose();\n        const changed = this.moveLeft();\n        this.transpose();\n        return changed;\n    }\n    moveDown() {\n        this.transpose();\n        const changed = this.moveRight();\n        this.transpose();\n        return changed;\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.fillFreeCell();\n        this.fillFreeCell();\n        this.updateBorder();\n    }\n    restart() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.updateBorder();\n    }\n    fillFreeCell() {\n        const emptyCells = $a5fd07fa01589658$require$getEmptyCells(this.state);\n        // let count = Math.min(2, emptyCells.length);\n        if (emptyCells.length > 0) {\n            const index = Math.floor(Math.random() * emptyCells.length);\n            const [row, coll] = emptyCells[index];\n            this.state[row][coll] = $a5fd07fa01589658$require$getRandomTwoOrFour();\n        // emptyCells.splice(index, 1);\n        // count -= 1;\n        }\n    }\n    checkLose() {\n        const emptyCells = $a5fd07fa01589658$require$getEmptyCells(this.state);\n        if (!emptyCells.length) {\n            for(let x = 0; x < $a5fd07fa01589658$var$SIZE; x++)for(let y = 0; y < $a5fd07fa01589658$var$SIZE - 1; y++){\n                if (this.state[x][y] === this.state[x][y + 1]) return;\n            }\n            for(let y = 0; y < $a5fd07fa01589658$var$SIZE; y++)for(let x = 0; x < $a5fd07fa01589658$var$SIZE - 1; x++){\n                if (this.state[x][y] === this.state[x + 1][y]) return;\n            }\n            this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n        }\n    }\n    updateBorder() {\n        const gameField = document.querySelector(\".game-field\");\n        this.state.forEach((row, rowIndex)=>{\n            row.forEach((cell, cellIndex)=>{\n                const gameCell = gameField.rows[rowIndex].children[cellIndex];\n                gameCell.textContent = cell === 0 ? \"\" : cell;\n                gameCell.className = \"field-cell\";\n                if (cell !== 0) gameCell.classList.add(`field-cell--${cell}`);\n                if (cell === 2048) this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n            });\n        });\n        this.checkLose();\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (buttonEvent)=>{\n    buttonEvent.preventDefault();\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.idle) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$startMessage.classList.toggle(\"hidden\");\n    $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n});\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\ndocument.addEventListener(\"keydown\", (keyEvent)=>{\n    if ($09e991522ca7e64e$var$game.getStatus() !== $a5fd07fa01589658$exports.gameStatus.playing) return;\n    let canMove = false;\n    switch(keyEvent.key){\n        case \"ArrowLeft\":\n            canMove = $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            canMove = $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            canMove = $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            canMove = $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    if (!canMove) return;\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$game.fillFreeCell();\n    $09e991522ca7e64e$var$game.updateBorder();\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n});\n\n\n//# sourceMappingURL=index.27ecb388.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\nconst button = document.querySelector('.button');\n\nbutton.addEventListener('click', (buttonEvent) => {\n  buttonEvent.preventDefault();\n  button.classList.toggle('start');\n  button.classList.toggle('restart');\n\n  if (game.getStatus() === Game.gameStatus.idle) {\n    game.start();\n    button.textContent = 'Restart';\n  } else {\n    game.restart();\n    button.textContent = 'Start';\n  }\n  score.textContent = game.getScore();\n  startMessage.classList.toggle('hidden');\n  loseMessage.classList.add('hidden');\n  winMessage.classList.add('hidden');\n});\n\nconst score = document.querySelector('.game-score');\n\ndocument.addEventListener('keydown', (keyEvent) => {\n  if (game.getStatus() !== Game.gameStatus.playing) {\n    return;\n  }\n\n  let canMove = false;\n\n  switch (keyEvent.key) {\n    case 'ArrowLeft':\n      canMove = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      canMove = game.moveRight();\n      break;\n    case 'ArrowUp':\n      canMove = game.moveUp();\n      break;\n    case 'ArrowDown':\n      canMove = game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  if (!canMove) {\n    return;\n  }\n  score.textContent = game.getScore();\n  game.fillFreeCell();\n  game.updateBorder();\n\n  if (game.getStatus() === Game.gameStatus.win) {\n    winMessage.classList.remove('hidden');\n  }\n\n  if (game.getStatus() === Game.gameStatus.lose) {\n    loseMessage.classList.remove('hidden');\n  }\n});\n","'use strict';\n\nconst { getEmptyCells, getRandomTwoOrFour } = require('../utils/utils');\n\nconst SIZE = 4;\n\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n  }\n\n  slideLeft(filledCells) {\n    filledCells.forEach((row) => {\n      for (let i = 0; i < row.length - 1; i++) {\n        if (row[i] === row[i + 1]) {\n          row[i] *= 2;\n          this.score += row[i];\n          row.splice(i + 1, 1);\n        }\n      }\n\n      while (row.length < SIZE) {\n        row.push(0);\n      }\n    });\n  }\n\n  filledFilter(row) {\n    return row.filter((cell) => cell !== 0);\n  }\n\n  checkAbleToMove(cells) {\n    const newCells = cells.flat();\n    const oldCells = this.state.flat();\n\n    for (let i = 0; i < newCells.length; i++) {\n      if (newCells[i] !== oldCells[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  moveLeft() {\n    const filledCells = this.state.map((row) => this.filledFilter(row));\n\n    this.slideLeft(filledCells);\n\n    const changed = this.checkAbleToMove(filledCells);\n\n    this.state = filledCells;\n\n    return changed;\n  }\n\n  moveRight() {\n    const filledCells = this.state.map((row) => {\n      return this.filledFilter(row.reverse());\n    });\n\n    this.slideLeft(filledCells);\n\n    const changed = this.checkAbleToMove(filledCells);\n    const newCells = filledCells.map((row) => row.reverse());\n\n    this.state = newCells;\n\n    return changed;\n  }\n\n  swap(x, y) {\n    const tempCell = this.state[x][y];\n\n    this.state[x][y] = this.state[y][x];\n    this.state[y][x] = tempCell;\n  }\n\n  transpose() {\n    for (let x = 0; x < SIZE; x++) {\n      for (let y = 0; y < x; y++) {\n        this.swap(x, y);\n      }\n    }\n  }\n\n  moveUp() {\n    this.transpose();\n\n    const changed = this.moveLeft();\n\n    this.transpose();\n\n    return changed;\n  }\n\n  moveDown() {\n    this.transpose();\n\n    const changed = this.moveRight();\n\n    this.transpose();\n\n    return changed;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatus.playing;\n    this.fillFreeCell();\n    this.fillFreeCell();\n    this.updateBorder();\n  }\n\n  restart() {\n    this.status = Game.gameStatus.idle;\n    this.score = 0;\n    this.state = this.initialState.map((row) => [...row]);\n    this.updateBorder();\n  }\n\n  fillFreeCell() {\n    const emptyCells = getEmptyCells(this.state);\n    // let count = Math.min(2, emptyCells.length);\n\n    if (emptyCells.length > 0) {\n      const index = Math.floor(Math.random() * emptyCells.length);\n      const [row, coll] = emptyCells[index];\n\n      this.state[row][coll] = getRandomTwoOrFour();\n      // emptyCells.splice(index, 1);\n\n      // count -= 1;\n    }\n  }\n\n  checkLose() {\n    const emptyCells = getEmptyCells(this.state);\n\n    if (!emptyCells.length) {\n      for (let x = 0; x < SIZE; x++) {\n        for (let y = 0; y < SIZE - 1; y++) {\n          if (this.state[x][y] === this.state[x][y + 1]) {\n            return;\n          }\n        }\n      }\n\n      for (let y = 0; y < SIZE; y++) {\n        for (let x = 0; x < SIZE - 1; x++) {\n          if (this.state[x][y] === this.state[x + 1][y]) {\n            return;\n          }\n        }\n      }\n\n      this.status = Game.gameStatus.lose;\n    }\n  }\n\n  updateBorder() {\n    const gameField = document.querySelector('.game-field');\n\n    this.state.forEach((row, rowIndex) => {\n      row.forEach((cell, cellIndex) => {\n        const gameCell = gameField.rows[rowIndex].children[cellIndex];\n\n        gameCell.textContent = cell === 0 ? '' : cell;\n        gameCell.className = 'field-cell';\n\n        if (cell !== 0) {\n          gameCell.classList.add(`field-cell--${cell}`);\n        }\n\n        if (cell === 2048) {\n          this.status = Game.gameStatus.win;\n        }\n      });\n    });\n\n    this.checkLose();\n  }\n}\n\nmodule.exports = Game;\n","export const getRandomTwoOrFour = () => {\n  return Math.random() > 0.9 ? 4 : 2;\n};\n\nexport const getEmptyCells = (state) => {\n  const emptyCells = [];\n\n  for (let x = 0; x < 4; x++) {\n    for (let y = 0; y < 4; y++) {\n      if (state[x][y] === 0) {\n        emptyCells.push([x, y]);\n      }\n    }\n  }\n\n  return emptyCells;\n};\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$require$getEmptyCells","state","emptyCells","x","y","push","$a5fd07fa01589658$require$getRandomTwoOrFour","Math","random","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","constructor","initialState","map","row","score","status","slideLeft","filledCells","forEach","i","length","splice","filledFilter","filter","cell","checkAbleToMove","cells","newCells","flat","oldCells","moveLeft","changed","moveRight","reverse","swap","tempCell","transpose","moveUp","moveDown","getScore","getState","getStatus","start","fillFreeCell","updateBorder","restart","index","floor","coll","checkLose","$a5fd07fa01589658$var$SIZE","gameField","document","querySelector","rowIndex","cellIndex","gameCell","rows","children","textContent","className","classList","add","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$button","addEventListener","buttonEvent","preventDefault","toggle","$09e991522ca7e64e$var$score","keyEvent","canMove","key","remove"],"version":3,"file":"index.27ecb388.js.map"}